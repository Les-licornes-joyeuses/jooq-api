/*
 * This file is generated by jOOQ.
 */
package io.company.team.tables.mdd.tables;


import io.company.team.tables.mdd.Keys;
import io.company.team.tables.mdd.Mdd;
import io.company.team.tables.mdd.tables.records.ProfesseurBureauPreRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * La personne enseignante (identifiée par le matricule "matriculeP") a un
 * bureau et ce bureau est le "bureau". 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProfesseurBureauPre extends TableImpl<ProfesseurBureauPreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MDD.professeur_bureau_pre</code>
     */
    public static final ProfesseurBureauPre PROFESSEUR_BUREAU_PRE = new ProfesseurBureauPre();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfesseurBureauPreRecord> getRecordType() {
        return ProfesseurBureauPreRecord.class;
    }

    /**
     * The column <code>MDD.professeur_bureau_pre.matriculep</code>.
     */
    public final TableField<ProfesseurBureauPreRecord, String> MATRICULEP = createField(DSL.name("matriculep"), io.company.team.tables.mdd.Domains.MATRICULEP.getDataType(), this, "");

    /**
     * The column <code>MDD.professeur_bureau_pre.bureau</code>.
     */
    public final TableField<ProfesseurBureauPreRecord, String> BUREAU = createField(DSL.name("bureau"), io.company.team.tables.mdd.Domains.BUREAU.getDataType(), this, "");

    private ProfesseurBureauPre(Name alias, Table<ProfesseurBureauPreRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProfesseurBureauPre(Name alias, Table<ProfesseurBureauPreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("La personne enseignante (identifiée par le matricule \"matriculeP\") a un bureau et ce bureau est le \"bureau\". "), TableOptions.table());
    }

    /**
     * Create an aliased <code>MDD.professeur_bureau_pre</code> table reference
     */
    public ProfesseurBureauPre(String alias) {
        this(DSL.name(alias), PROFESSEUR_BUREAU_PRE);
    }

    /**
     * Create an aliased <code>MDD.professeur_bureau_pre</code> table reference
     */
    public ProfesseurBureauPre(Name alias) {
        this(alias, PROFESSEUR_BUREAU_PRE);
    }

    /**
     * Create a <code>MDD.professeur_bureau_pre</code> table reference
     */
    public ProfesseurBureauPre() {
        this(DSL.name("professeur_bureau_pre"), null);
    }

    public <O extends Record> ProfesseurBureauPre(Table<O> child, ForeignKey<O, ProfesseurBureauPreRecord> key) {
        super(child, key, PROFESSEUR_BUREAU_PRE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mdd.MDD;
    }

    @Override
    public UniqueKey<ProfesseurBureauPreRecord> getPrimaryKey() {
        return Keys.PROFESSEUR_BUREAU_PRE_CC0;
    }

    @Override
    public List<ForeignKey<ProfesseurBureauPreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROFESSEUR_BUREAU_PRE__PROFESSEUR_BUREAU_PRE_CR0);
    }

    private transient Professeur _professeur;

    /**
     * Get the implicit join path to the <code>MDD.professeur</code> table.
     */
    public Professeur professeur() {
        if (_professeur == null)
            _professeur = new Professeur(this, Keys.PROFESSEUR_BUREAU_PRE__PROFESSEUR_BUREAU_PRE_CR0);

        return _professeur;
    }

    @Override
    public ProfesseurBureauPre as(String alias) {
        return new ProfesseurBureauPre(DSL.name(alias), this);
    }

    @Override
    public ProfesseurBureauPre as(Name alias) {
        return new ProfesseurBureauPre(alias, this);
    }

    @Override
    public ProfesseurBureauPre as(Table<?> alias) {
        return new ProfesseurBureauPre(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfesseurBureauPre rename(String name) {
        return new ProfesseurBureauPre(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfesseurBureauPre rename(Name name) {
        return new ProfesseurBureauPre(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfesseurBureauPre rename(Table<?> name) {
        return new ProfesseurBureauPre(name.getQualifiedName(), null);
    }
}
