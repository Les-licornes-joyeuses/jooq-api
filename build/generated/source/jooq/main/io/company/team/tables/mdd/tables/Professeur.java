/*
 * This file is generated by jOOQ.
 */
package io.company.team.tables.mdd.tables;


import io.company.team.tables.mdd.Keys;
import io.company.team.tables.mdd.Mdd;
import io.company.team.tables.mdd.tables.records.ProfesseurRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * La personne enseignante (identifiée par le matricule "matriculeP") possède un
 * dossier à l’Université. Une personne enseignante est une professeure, un
 * professeur, une chargée de cours ou un chargé de cours. Son nom est "nom". 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Professeur extends TableImpl<ProfesseurRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MDD.professeur</code>
     */
    public static final Professeur PROFESSEUR = new Professeur();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfesseurRecord> getRecordType() {
        return ProfesseurRecord.class;
    }

    /**
     * The column <code>MDD.professeur.matriculep</code>.
     */
    public final TableField<ProfesseurRecord, String> MATRICULEP = createField(DSL.name("matriculep"), io.company.team.tables.mdd.Domains.MATRICULEP.getDataType(), this, "");

    /**
     * The column <code>MDD.professeur.nom</code>.
     */
    public final TableField<ProfesseurRecord, String> NOM = createField(DSL.name("nom"), io.company.team.tables.mdd.Domains.NOM.getDataType(), this, "");

    private Professeur(Name alias, Table<ProfesseurRecord> aliased) {
        this(alias, aliased, null);
    }

    private Professeur(Name alias, Table<ProfesseurRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("La personne enseignante (identifiée par le matricule \"matriculeP\") possède un dossier à l’Université. Une personne enseignante est une professeure, un professeur, une chargée de cours ou un chargé de cours. Son nom est \"nom\". "), TableOptions.table());
    }

    /**
     * Create an aliased <code>MDD.professeur</code> table reference
     */
    public Professeur(String alias) {
        this(DSL.name(alias), PROFESSEUR);
    }

    /**
     * Create an aliased <code>MDD.professeur</code> table reference
     */
    public Professeur(Name alias) {
        this(alias, PROFESSEUR);
    }

    /**
     * Create a <code>MDD.professeur</code> table reference
     */
    public Professeur() {
        this(DSL.name("professeur"), null);
    }

    public <O extends Record> Professeur(Table<O> child, ForeignKey<O, ProfesseurRecord> key) {
        super(child, key, PROFESSEUR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mdd.MDD;
    }

    @Override
    public UniqueKey<ProfesseurRecord> getPrimaryKey() {
        return Keys.PROFESSEUR_CC0;
    }

    @Override
    public Professeur as(String alias) {
        return new Professeur(DSL.name(alias), this);
    }

    @Override
    public Professeur as(Name alias) {
        return new Professeur(alias, this);
    }

    @Override
    public Professeur as(Table<?> alias) {
        return new Professeur(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Professeur rename(String name) {
        return new Professeur(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Professeur rename(Name name) {
        return new Professeur(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Professeur rename(Table<?> name) {
        return new Professeur(name.getQualifiedName(), null);
    }
}
