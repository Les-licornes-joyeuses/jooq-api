/*
 * This file is generated by jOOQ.
 */
package io.company.team.tables.imm_base.tables;


import io.company.team.tables.imm_base.ImmBase;
import io.company.team.tables.imm_base.tables.records.GetallprofRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Getallprof extends TableImpl<GetallprofRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>IMM_base.getallprof</code>
     */
    public static final Getallprof GETALLPROF = new Getallprof();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetallprofRecord> getRecordType() {
        return GetallprofRecord.class;
    }

    /**
     * The column <code>IMM_base.getallprof.matriculep</code>.
     */
    public final TableField<GetallprofRecord, String> MATRICULEP = createField(DSL.name("matriculep"), io.company.team.tables.mdd.Domains.MATRICULEP.getDataType(), this, "");

    /**
     * The column <code>IMM_base.getallprof.nom</code>.
     */
    public final TableField<GetallprofRecord, String> NOM = createField(DSL.name("nom"), io.company.team.tables.mdd.Domains.NOM.getDataType(), this, "");

    private Getallprof(Name alias, Table<GetallprofRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private Getallprof(Name alias, Table<GetallprofRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>IMM_base.getallprof</code> table reference
     */
    public Getallprof(String alias) {
        this(DSL.name(alias), GETALLPROF);
    }

    /**
     * Create an aliased <code>IMM_base.getallprof</code> table reference
     */
    public Getallprof(Name alias) {
        this(alias, GETALLPROF);
    }

    /**
     * Create a <code>IMM_base.getallprof</code> table reference
     */
    public Getallprof() {
        this(DSL.name("getallprof"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ImmBase.IMM_BASE;
    }

    @Override
    public Getallprof as(String alias) {
        return new Getallprof(DSL.name(alias), this, parameters);
    }

    @Override
    public Getallprof as(Name alias) {
        return new Getallprof(alias, this, parameters);
    }

    @Override
    public Getallprof as(Table<?> alias) {
        return new Getallprof(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getallprof rename(String name) {
        return new Getallprof(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getallprof rename(Name name) {
        return new Getallprof(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getallprof rename(Table<?> name) {
        return new Getallprof(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public Getallprof call() {
        Getallprof result = new Getallprof(DSL.name("getallprof"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
