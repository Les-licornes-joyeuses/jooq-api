/*
 * This file is generated by jOOQ.
 */
package io.company.team.tables.mdd.tables;


import io.company.team.tables.mdd.Keys;
import io.company.team.tables.mdd.Mdd;
import io.company.team.tables.mdd.tables.records.OffreRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * l’Université s’engage à offrir le cours "sigle" au trimestre "trimestre". 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Offre extends TableImpl<OffreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MDD.offre</code>
     */
    public static final Offre OFFRE = new Offre();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OffreRecord> getRecordType() {
        return OffreRecord.class;
    }

    /**
     * The column <code>MDD.offre.sigle</code>.
     */
    public final TableField<OffreRecord, String> SIGLE = createField(DSL.name("sigle"), io.company.team.tables.mdd.Domains.SIGLE.getDataType(), this, "");

    /**
     * The column <code>MDD.offre.trimestre</code>.
     */
    public final TableField<OffreRecord, String> TRIMESTRE = createField(DSL.name("trimestre"), io.company.team.tables.mdd.Domains.TRIMESTRE.getDataType(), this, "");

    private Offre(Name alias, Table<OffreRecord> aliased) {
        this(alias, aliased, null);
    }

    private Offre(Name alias, Table<OffreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("l’Université s’engage à offrir le cours \"sigle\" au trimestre \"trimestre\". "), TableOptions.table());
    }

    /**
     * Create an aliased <code>MDD.offre</code> table reference
     */
    public Offre(String alias) {
        this(DSL.name(alias), OFFRE);
    }

    /**
     * Create an aliased <code>MDD.offre</code> table reference
     */
    public Offre(Name alias) {
        this(alias, OFFRE);
    }

    /**
     * Create a <code>MDD.offre</code> table reference
     */
    public Offre() {
        this(DSL.name("offre"), null);
    }

    public <O extends Record> Offre(Table<O> child, ForeignKey<O, OffreRecord> key) {
        super(child, key, OFFRE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mdd.MDD;
    }

    @Override
    public UniqueKey<OffreRecord> getPrimaryKey() {
        return Keys.OFFRE_CC0;
    }

    @Override
    public List<ForeignKey<OffreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OFFRE__OFFRE_CR0);
    }

    private transient Cours _cours;

    /**
     * Get the implicit join path to the <code>MDD.cours</code> table.
     */
    public Cours cours() {
        if (_cours == null)
            _cours = new Cours(this, Keys.OFFRE__OFFRE_CR0);

        return _cours;
    }

    @Override
    public Offre as(String alias) {
        return new Offre(DSL.name(alias), this);
    }

    @Override
    public Offre as(Name alias) {
        return new Offre(alias, this);
    }

    @Override
    public Offre as(Table<?> alias) {
        return new Offre(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Offre rename(String name) {
        return new Offre(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Offre rename(Name name) {
        return new Offre(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Offre rename(Table<?> name) {
        return new Offre(name.getQualifiedName(), null);
    }
}
