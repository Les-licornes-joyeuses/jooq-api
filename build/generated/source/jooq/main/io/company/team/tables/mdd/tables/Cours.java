/*
 * This file is generated by jOOQ.
 */
package io.company.team.tables.mdd.tables;


import io.company.team.tables.mdd.Keys;
import io.company.team.tables.mdd.Mdd;
import io.company.team.tables.mdd.tables.records.CoursRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Le cours (identifié par le sigle "sigle") est défini dans le répertoire des
 * cours offerts par l’Université. Il a pour titre "titre". Il comporte "credit"
 * crédit(s). 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cours extends TableImpl<CoursRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MDD.cours</code>
     */
    public static final Cours COURS = new Cours();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoursRecord> getRecordType() {
        return CoursRecord.class;
    }

    /**
     * The column <code>MDD.cours.sigle</code>.
     */
    public final TableField<CoursRecord, String> SIGLE = createField(DSL.name("sigle"), io.company.team.tables.mdd.Domains.SIGLE.getDataType(), this, "");

    /**
     * The column <code>MDD.cours.titre</code>.
     */
    public final TableField<CoursRecord, String> TITRE = createField(DSL.name("titre"), io.company.team.tables.mdd.Domains.TITRE.getDataType(), this, "");

    /**
     * The column <code>MDD.cours.credit</code>.
     */
    public final TableField<CoursRecord, Short> CREDIT = createField(DSL.name("credit"), io.company.team.tables.mdd.Domains.CDC.getDataType(), this, "");

    private Cours(Name alias, Table<CoursRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cours(Name alias, Table<CoursRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Le cours (identifié par le sigle \"sigle\") est défini dans le répertoire des cours offerts par l’Université. Il a pour titre \"titre\". Il comporte \"credit\" crédit(s). "), TableOptions.table());
    }

    /**
     * Create an aliased <code>MDD.cours</code> table reference
     */
    public Cours(String alias) {
        this(DSL.name(alias), COURS);
    }

    /**
     * Create an aliased <code>MDD.cours</code> table reference
     */
    public Cours(Name alias) {
        this(alias, COURS);
    }

    /**
     * Create a <code>MDD.cours</code> table reference
     */
    public Cours() {
        this(DSL.name("cours"), null);
    }

    public <O extends Record> Cours(Table<O> child, ForeignKey<O, CoursRecord> key) {
        super(child, key, COURS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mdd.MDD;
    }

    @Override
    public UniqueKey<CoursRecord> getPrimaryKey() {
        return Keys.COURS_CC0;
    }

    @Override
    public Cours as(String alias) {
        return new Cours(DSL.name(alias), this);
    }

    @Override
    public Cours as(Name alias) {
        return new Cours(alias, this);
    }

    @Override
    public Cours as(Table<?> alias) {
        return new Cours(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cours rename(String name) {
        return new Cours(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cours rename(Name name) {
        return new Cours(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cours rename(Table<?> name) {
        return new Cours(name.getQualifiedName(), null);
    }
}
