/*
 * This file is generated by jOOQ.
 */
package io.company.team.tables.imm_etudiant.tables;


import io.company.team.tables.imm_etudiant.ImmEtudiant;
import io.company.team.tables.imm_etudiant.tables.records.GetnoteetudiantRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Getnoteetudiant extends TableImpl<GetnoteetudiantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>imm_etudiant.getnoteetudiant</code>
     */
    public static final Getnoteetudiant GETNOTEETUDIANT = new Getnoteetudiant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetnoteetudiantRecord> getRecordType() {
        return GetnoteetudiantRecord.class;
    }

    /**
     * The column <code>imm_etudiant.getnoteetudiant.note</code>.
     */
    public final TableField<GetnoteetudiantRecord, Short> NOTE = createField(DSL.name("note"), io.company.team.tables.mdd.Domains.NOTE.getDataType(), this, "");

    private Getnoteetudiant(Name alias, Table<GetnoteetudiantRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, io.company.team.tables.mdd.Domains.MATRICULEE.getDataType()),
            DSL.val(null, io.company.team.tables.mdd.Domains.SIGLE.getDataType())
        });
    }

    private Getnoteetudiant(Name alias, Table<GetnoteetudiantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>imm_etudiant.getnoteetudiant</code> table
     * reference
     */
    public Getnoteetudiant(String alias) {
        this(DSL.name(alias), GETNOTEETUDIANT);
    }

    /**
     * Create an aliased <code>imm_etudiant.getnoteetudiant</code> table
     * reference
     */
    public Getnoteetudiant(Name alias) {
        this(alias, GETNOTEETUDIANT);
    }

    /**
     * Create a <code>imm_etudiant.getnoteetudiant</code> table reference
     */
    public Getnoteetudiant() {
        this(DSL.name("getnoteetudiant"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ImmEtudiant.IMM_ETUDIANT;
    }

    @Override
    public Getnoteetudiant as(String alias) {
        return new Getnoteetudiant(DSL.name(alias), this, parameters);
    }

    @Override
    public Getnoteetudiant as(Name alias) {
        return new Getnoteetudiant(alias, this, parameters);
    }

    @Override
    public Getnoteetudiant as(Table<?> alias) {
        return new Getnoteetudiant(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getnoteetudiant rename(String name) {
        return new Getnoteetudiant(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getnoteetudiant rename(Name name) {
        return new Getnoteetudiant(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getnoteetudiant rename(Table<?> name) {
        return new Getnoteetudiant(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public Getnoteetudiant call(
          String _Matriculee
        , String _Sigle
    ) {
        Getnoteetudiant result = new Getnoteetudiant(DSL.name("getnoteetudiant"), null, new Field[] {
            DSL.val(_Matriculee, io.company.team.tables.mdd.Domains.MATRICULEE.getDataType()),
            DSL.val(_Sigle, io.company.team.tables.mdd.Domains.SIGLE.getDataType())
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public Getnoteetudiant call(
          Field<String> _Matriculee
        , Field<String> _Sigle
    ) {
        Getnoteetudiant result = new Getnoteetudiant(DSL.name("getnoteetudiant"), null, new Field[] {
            _Matriculee,
            _Sigle
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
