/*
 * This file is generated by jOOQ.
 */
package io.company.team.tables.mdd.tables;


import io.company.team.tables.mdd.Keys;
import io.company.team.tables.mdd.Mdd;
import io.company.team.tables.mdd.tables.records.EtudiantRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * La personne étudiante (identifiée par le matricule "matriculeE") possède un
 * dossier à l’Université. Son nom est "nom". Sa date de naissance est "ddn". 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Etudiant extends TableImpl<EtudiantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MDD.etudiant</code>
     */
    public static final Etudiant ETUDIANT = new Etudiant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EtudiantRecord> getRecordType() {
        return EtudiantRecord.class;
    }

    /**
     * The column <code>MDD.etudiant.matriculee</code>.
     */
    public final TableField<EtudiantRecord, String> MATRICULEE = createField(DSL.name("matriculee"), io.company.team.tables.mdd.Domains.MATRICULEE.getDataType(), this, "");

    /**
     * The column <code>MDD.etudiant.nom</code>.
     */
    public final TableField<EtudiantRecord, String> NOM = createField(DSL.name("nom"), io.company.team.tables.mdd.Domains.NOM.getDataType(), this, "");

    /**
     * The column <code>MDD.etudiant.ddn</code>.
     */
    public final TableField<EtudiantRecord, LocalDate> DDN = createField(DSL.name("ddn"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private Etudiant(Name alias, Table<EtudiantRecord> aliased) {
        this(alias, aliased, null);
    }

    private Etudiant(Name alias, Table<EtudiantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("La personne étudiante (identifiée par le matricule \"matriculeE\") possède un dossier à l’Université. Son nom est \"nom\". Sa date de naissance est \"ddn\". "), TableOptions.table());
    }

    /**
     * Create an aliased <code>MDD.etudiant</code> table reference
     */
    public Etudiant(String alias) {
        this(DSL.name(alias), ETUDIANT);
    }

    /**
     * Create an aliased <code>MDD.etudiant</code> table reference
     */
    public Etudiant(Name alias) {
        this(alias, ETUDIANT);
    }

    /**
     * Create a <code>MDD.etudiant</code> table reference
     */
    public Etudiant() {
        this(DSL.name("etudiant"), null);
    }

    public <O extends Record> Etudiant(Table<O> child, ForeignKey<O, EtudiantRecord> key) {
        super(child, key, ETUDIANT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mdd.MDD;
    }

    @Override
    public UniqueKey<EtudiantRecord> getPrimaryKey() {
        return Keys.ETUDIANT_CC0;
    }

    @Override
    public Etudiant as(String alias) {
        return new Etudiant(DSL.name(alias), this);
    }

    @Override
    public Etudiant as(Name alias) {
        return new Etudiant(alias, this);
    }

    @Override
    public Etudiant as(Table<?> alias) {
        return new Etudiant(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Etudiant rename(String name) {
        return new Etudiant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Etudiant rename(Name name) {
        return new Etudiant(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Etudiant rename(Table<?> name) {
        return new Etudiant(name.getQualifiedName(), null);
    }
}
