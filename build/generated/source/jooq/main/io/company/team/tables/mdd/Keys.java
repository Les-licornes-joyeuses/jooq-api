/*
 * This file is generated by jOOQ.
 */
package io.company.team.tables.mdd;


import io.company.team.tables.mdd.tables.Affectation;
import io.company.team.tables.mdd.tables.Competence;
import io.company.team.tables.mdd.tables.Cours;
import io.company.team.tables.mdd.tables.Disponibilite;
import io.company.team.tables.mdd.tables.Etudiant;
import io.company.team.tables.mdd.tables.Evaluation;
import io.company.team.tables.mdd.tables.Groupe;
import io.company.team.tables.mdd.tables.Inscription;
import io.company.team.tables.mdd.tables.Offre;
import io.company.team.tables.mdd.tables.Prealable;
import io.company.team.tables.mdd.tables.Professeur;
import io.company.team.tables.mdd.tables.ProfesseurBureauAbs;
import io.company.team.tables.mdd.tables.ProfesseurBureauPre;
import io.company.team.tables.mdd.tables.records.AffectationRecord;
import io.company.team.tables.mdd.tables.records.CompetenceRecord;
import io.company.team.tables.mdd.tables.records.CoursRecord;
import io.company.team.tables.mdd.tables.records.DisponibiliteRecord;
import io.company.team.tables.mdd.tables.records.EtudiantRecord;
import io.company.team.tables.mdd.tables.records.EvaluationRecord;
import io.company.team.tables.mdd.tables.records.GroupeRecord;
import io.company.team.tables.mdd.tables.records.InscriptionRecord;
import io.company.team.tables.mdd.tables.records.OffreRecord;
import io.company.team.tables.mdd.tables.records.PrealableRecord;
import io.company.team.tables.mdd.tables.records.ProfesseurBureauAbsRecord;
import io.company.team.tables.mdd.tables.records.ProfesseurBureauPreRecord;
import io.company.team.tables.mdd.tables.records.ProfesseurRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in MDD.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AffectationRecord> AFFECTATION_CC0 = Internal.createUniqueKey(Affectation.AFFECTATION, DSL.name("affectation_cc0"), new TableField[] { Affectation.AFFECTATION.SIGLE, Affectation.AFFECTATION.TRIMESTRE, Affectation.AFFECTATION.NOGROUPE }, true);
    public static final UniqueKey<CompetenceRecord> COMPETENCE_CC0 = Internal.createUniqueKey(Competence.COMPETENCE, DSL.name("competence_cc0"), new TableField[] { Competence.COMPETENCE.SIGLE, Competence.COMPETENCE.MATRICULEP }, true);
    public static final UniqueKey<CoursRecord> COURS_CC0 = Internal.createUniqueKey(Cours.COURS, DSL.name("cours_cc0"), new TableField[] { Cours.COURS.SIGLE }, true);
    public static final UniqueKey<DisponibiliteRecord> DISPONIBILITE_CC0 = Internal.createUniqueKey(Disponibilite.DISPONIBILITE, DSL.name("disponibilite_cc0"), new TableField[] { Disponibilite.DISPONIBILITE.TRIMESTRE, Disponibilite.DISPONIBILITE.MATRICULEP }, true);
    public static final UniqueKey<EtudiantRecord> ETUDIANT_CC0 = Internal.createUniqueKey(Etudiant.ETUDIANT, DSL.name("etudiant_cc0"), new TableField[] { Etudiant.ETUDIANT.MATRICULEE }, true);
    public static final UniqueKey<EvaluationRecord> EVALUATION_CC0 = Internal.createUniqueKey(Evaluation.EVALUATION, DSL.name("evaluation_cc0"), new TableField[] { Evaluation.EVALUATION.MATRICULEE, Evaluation.EVALUATION.SIGLE, Evaluation.EVALUATION.TRIMESTRE, Evaluation.EVALUATION.NOGROUPE }, true);
    public static final UniqueKey<GroupeRecord> GROUPE_CC0 = Internal.createUniqueKey(Groupe.GROUPE, DSL.name("groupe_cc0"), new TableField[] { Groupe.GROUPE.SIGLE, Groupe.GROUPE.TRIMESTRE, Groupe.GROUPE.NOGROUPE }, true);
    public static final UniqueKey<InscriptionRecord> INSCRIPTION_CC0 = Internal.createUniqueKey(Inscription.INSCRIPTION, DSL.name("inscription_cc0"), new TableField[] { Inscription.INSCRIPTION.SIGLE, Inscription.INSCRIPTION.TRIMESTRE, Inscription.INSCRIPTION.NOGROUPE, Inscription.INSCRIPTION.MATRICULEE }, true);
    public static final UniqueKey<OffreRecord> OFFRE_CC0 = Internal.createUniqueKey(Offre.OFFRE, DSL.name("offre_cc0"), new TableField[] { Offre.OFFRE.SIGLE, Offre.OFFRE.TRIMESTRE }, true);
    public static final UniqueKey<PrealableRecord> PREALABLE_CC0 = Internal.createUniqueKey(Prealable.PREALABLE, DSL.name("prealable_cc0"), new TableField[] { Prealable.PREALABLE.SIGLE, Prealable.PREALABLE.SIGLEPREALABLE }, true);
    public static final UniqueKey<ProfesseurRecord> PROFESSEUR_CC0 = Internal.createUniqueKey(Professeur.PROFESSEUR, DSL.name("professeur_cc0"), new TableField[] { Professeur.PROFESSEUR.MATRICULEP }, true);
    public static final UniqueKey<ProfesseurBureauAbsRecord> PROFESSEUR_BUREAU_ABS_CC0 = Internal.createUniqueKey(ProfesseurBureauAbs.PROFESSEUR_BUREAU_ABS, DSL.name("professeur_bureau_abs_cc0"), new TableField[] { ProfesseurBureauAbs.PROFESSEUR_BUREAU_ABS.MATRICULEP }, true);
    public static final UniqueKey<ProfesseurBureauPreRecord> PROFESSEUR_BUREAU_PRE_CC0 = Internal.createUniqueKey(ProfesseurBureauPre.PROFESSEUR_BUREAU_PRE, DSL.name("professeur_bureau_pre_cc0"), new TableField[] { ProfesseurBureauPre.PROFESSEUR_BUREAU_PRE.MATRICULEP }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AffectationRecord, GroupeRecord> AFFECTATION__AFFECTATION_CR0 = Internal.createForeignKey(Affectation.AFFECTATION, DSL.name("affectation_cr0"), new TableField[] { Affectation.AFFECTATION.SIGLE, Affectation.AFFECTATION.TRIMESTRE, Affectation.AFFECTATION.NOGROUPE }, Keys.GROUPE_CC0, new TableField[] { Groupe.GROUPE.SIGLE, Groupe.GROUPE.TRIMESTRE, Groupe.GROUPE.NOGROUPE }, true);
    public static final ForeignKey<AffectationRecord, ProfesseurRecord> AFFECTATION__AFFECTATION_CR1 = Internal.createForeignKey(Affectation.AFFECTATION, DSL.name("affectation_cr1"), new TableField[] { Affectation.AFFECTATION.MATRICULEP }, Keys.PROFESSEUR_CC0, new TableField[] { Professeur.PROFESSEUR.MATRICULEP }, true);
    public static final ForeignKey<CompetenceRecord, CoursRecord> COMPETENCE__COMPETENCE_CR0 = Internal.createForeignKey(Competence.COMPETENCE, DSL.name("competence_cr0"), new TableField[] { Competence.COMPETENCE.SIGLE }, Keys.COURS_CC0, new TableField[] { Cours.COURS.SIGLE }, true);
    public static final ForeignKey<CompetenceRecord, ProfesseurRecord> COMPETENCE__COMPETENCE_CR1 = Internal.createForeignKey(Competence.COMPETENCE, DSL.name("competence_cr1"), new TableField[] { Competence.COMPETENCE.MATRICULEP }, Keys.PROFESSEUR_CC0, new TableField[] { Professeur.PROFESSEUR.MATRICULEP }, true);
    public static final ForeignKey<DisponibiliteRecord, CoursRecord> DISPONIBILITE__DISPONIBILITE_CR0 = Internal.createForeignKey(Disponibilite.DISPONIBILITE, DSL.name("disponibilite_cr0"), new TableField[] { Disponibilite.DISPONIBILITE.TRIMESTRE }, Keys.COURS_CC0, new TableField[] { Cours.COURS.SIGLE }, true);
    public static final ForeignKey<DisponibiliteRecord, ProfesseurRecord> DISPONIBILITE__DISPONIBILITE_CR1 = Internal.createForeignKey(Disponibilite.DISPONIBILITE, DSL.name("disponibilite_cr1"), new TableField[] { Disponibilite.DISPONIBILITE.MATRICULEP }, Keys.PROFESSEUR_CC0, new TableField[] { Professeur.PROFESSEUR.MATRICULEP }, true);
    public static final ForeignKey<EvaluationRecord, InscriptionRecord> EVALUATION__EVALUATION_CR0 = Internal.createForeignKey(Evaluation.EVALUATION, DSL.name("evaluation_cr0"), new TableField[] { Evaluation.EVALUATION.SIGLE, Evaluation.EVALUATION.TRIMESTRE, Evaluation.EVALUATION.NOGROUPE, Evaluation.EVALUATION.MATRICULEE }, Keys.INSCRIPTION_CC0, new TableField[] { Inscription.INSCRIPTION.SIGLE, Inscription.INSCRIPTION.TRIMESTRE, Inscription.INSCRIPTION.NOGROUPE, Inscription.INSCRIPTION.MATRICULEE }, true);
    public static final ForeignKey<GroupeRecord, CoursRecord> GROUPE__GROUPE_CR0 = Internal.createForeignKey(Groupe.GROUPE, DSL.name("groupe_cr0"), new TableField[] { Groupe.GROUPE.SIGLE }, Keys.COURS_CC0, new TableField[] { Cours.COURS.SIGLE }, true);
    public static final ForeignKey<InscriptionRecord, GroupeRecord> INSCRIPTION__INSCRIPTION_CR0 = Internal.createForeignKey(Inscription.INSCRIPTION, DSL.name("inscription_cr0"), new TableField[] { Inscription.INSCRIPTION.SIGLE, Inscription.INSCRIPTION.TRIMESTRE, Inscription.INSCRIPTION.NOGROUPE }, Keys.GROUPE_CC0, new TableField[] { Groupe.GROUPE.SIGLE, Groupe.GROUPE.TRIMESTRE, Groupe.GROUPE.NOGROUPE }, true);
    public static final ForeignKey<OffreRecord, CoursRecord> OFFRE__OFFRE_CR0 = Internal.createForeignKey(Offre.OFFRE, DSL.name("offre_cr0"), new TableField[] { Offre.OFFRE.SIGLE }, Keys.COURS_CC0, new TableField[] { Cours.COURS.SIGLE }, true);
    public static final ForeignKey<PrealableRecord, CoursRecord> PREALABLE__PREALABLE_CR0 = Internal.createForeignKey(Prealable.PREALABLE, DSL.name("prealable_cr0"), new TableField[] { Prealable.PREALABLE.SIGLE }, Keys.COURS_CC0, new TableField[] { Cours.COURS.SIGLE }, true);
    public static final ForeignKey<PrealableRecord, CoursRecord> PREALABLE__PREALABLE_CR1 = Internal.createForeignKey(Prealable.PREALABLE, DSL.name("prealable_cr1"), new TableField[] { Prealable.PREALABLE.SIGLEPREALABLE }, Keys.COURS_CC0, new TableField[] { Cours.COURS.SIGLE }, true);
    public static final ForeignKey<ProfesseurBureauAbsRecord, ProfesseurRecord> PROFESSEUR_BUREAU_ABS__PROFESSEUR_BUREAU_ABS_CR1 = Internal.createForeignKey(ProfesseurBureauAbs.PROFESSEUR_BUREAU_ABS, DSL.name("professeur_bureau_abs_cr1"), new TableField[] { ProfesseurBureauAbs.PROFESSEUR_BUREAU_ABS.MATRICULEP }, Keys.PROFESSEUR_CC0, new TableField[] { Professeur.PROFESSEUR.MATRICULEP }, true);
    public static final ForeignKey<ProfesseurBureauPreRecord, ProfesseurRecord> PROFESSEUR_BUREAU_PRE__PROFESSEUR_BUREAU_PRE_CR0 = Internal.createForeignKey(ProfesseurBureauPre.PROFESSEUR_BUREAU_PRE, DSL.name("professeur_bureau_pre_cr0"), new TableField[] { ProfesseurBureauPre.PROFESSEUR_BUREAU_PRE.MATRICULEP }, Keys.PROFESSEUR_CC0, new TableField[] { Professeur.PROFESSEUR.MATRICULEP }, true);
}
