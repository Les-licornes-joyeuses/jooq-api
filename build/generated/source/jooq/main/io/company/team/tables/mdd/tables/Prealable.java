/*
 * This file is generated by jOOQ.
 */
package io.company.team.tables.mdd.tables;


import io.company.team.tables.mdd.Keys;
import io.company.team.tables.mdd.Mdd;
import io.company.team.tables.mdd.tables.records.PrealableRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * L’inscription au cours "sigle" n’est autorisée qu’aux personnes qui auront
 * réussi le cours "siglePréalable" avant le début du cours "sigle". 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Prealable extends TableImpl<PrealableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MDD.prealable</code>
     */
    public static final Prealable PREALABLE = new Prealable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PrealableRecord> getRecordType() {
        return PrealableRecord.class;
    }

    /**
     * The column <code>MDD.prealable.sigle</code>.
     */
    public final TableField<PrealableRecord, String> SIGLE = createField(DSL.name("sigle"), io.company.team.tables.mdd.Domains.SIGLE.getDataType(), this, "");

    /**
     * The column <code>MDD.prealable.sigleprealable</code>.
     */
    public final TableField<PrealableRecord, String> SIGLEPREALABLE = createField(DSL.name("sigleprealable"), io.company.team.tables.mdd.Domains.SIGLE.getDataType(), this, "");

    private Prealable(Name alias, Table<PrealableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Prealable(Name alias, Table<PrealableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("L’inscription au cours \"sigle\" n’est autorisée qu’aux personnes qui auront réussi le cours \"siglePréalable\" avant le début du cours \"sigle\". "), TableOptions.table());
    }

    /**
     * Create an aliased <code>MDD.prealable</code> table reference
     */
    public Prealable(String alias) {
        this(DSL.name(alias), PREALABLE);
    }

    /**
     * Create an aliased <code>MDD.prealable</code> table reference
     */
    public Prealable(Name alias) {
        this(alias, PREALABLE);
    }

    /**
     * Create a <code>MDD.prealable</code> table reference
     */
    public Prealable() {
        this(DSL.name("prealable"), null);
    }

    public <O extends Record> Prealable(Table<O> child, ForeignKey<O, PrealableRecord> key) {
        super(child, key, PREALABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mdd.MDD;
    }

    @Override
    public UniqueKey<PrealableRecord> getPrimaryKey() {
        return Keys.PREALABLE_CC0;
    }

    @Override
    public List<ForeignKey<PrealableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PREALABLE__PREALABLE_CR0, Keys.PREALABLE__PREALABLE_CR1);
    }

    private transient Cours _prealableCr0;
    private transient Cours _prealableCr1;

    /**
     * Get the implicit join path to the <code>MDD.cours</code> table, via the
     * <code>prealable_cr0</code> key.
     */
    public Cours prealableCr0() {
        if (_prealableCr0 == null)
            _prealableCr0 = new Cours(this, Keys.PREALABLE__PREALABLE_CR0);

        return _prealableCr0;
    }

    /**
     * Get the implicit join path to the <code>MDD.cours</code> table, via the
     * <code>prealable_cr1</code> key.
     */
    public Cours prealableCr1() {
        if (_prealableCr1 == null)
            _prealableCr1 = new Cours(this, Keys.PREALABLE__PREALABLE_CR1);

        return _prealableCr1;
    }

    @Override
    public Prealable as(String alias) {
        return new Prealable(DSL.name(alias), this);
    }

    @Override
    public Prealable as(Name alias) {
        return new Prealable(alias, this);
    }

    @Override
    public Prealable as(Table<?> alias) {
        return new Prealable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Prealable rename(String name) {
        return new Prealable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prealable rename(Name name) {
        return new Prealable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prealable rename(Table<?> name) {
        return new Prealable(name.getQualifiedName(), null);
    }
}
