/*
 * This file is generated by jOOQ.
 */
package io.company.team.tables.mdd.tables;


import io.company.team.tables.mdd.Keys;
import io.company.team.tables.mdd.Mdd;
import io.company.team.tables.mdd.tables.records.DisponibiliteRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * La personne enseignante (identifiée par "matriculeP") est disponible pour
 * enseigner durant le trimestre "trimestre". 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Disponibilite extends TableImpl<DisponibiliteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MDD.disponibilite</code>
     */
    public static final Disponibilite DISPONIBILITE = new Disponibilite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DisponibiliteRecord> getRecordType() {
        return DisponibiliteRecord.class;
    }

    /**
     * The column <code>MDD.disponibilite.trimestre</code>.
     */
    public final TableField<DisponibiliteRecord, String> TRIMESTRE = createField(DSL.name("trimestre"), io.company.team.tables.mdd.Domains.TRIMESTRE.getDataType(), this, "");

    /**
     * The column <code>MDD.disponibilite.matriculep</code>.
     */
    public final TableField<DisponibiliteRecord, String> MATRICULEP = createField(DSL.name("matriculep"), io.company.team.tables.mdd.Domains.MATRICULEP.getDataType(), this, "");

    private Disponibilite(Name alias, Table<DisponibiliteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Disponibilite(Name alias, Table<DisponibiliteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("La personne enseignante (identifiée par \"matriculeP\") est disponible pour enseigner durant le trimestre \"trimestre\". "), TableOptions.table());
    }

    /**
     * Create an aliased <code>MDD.disponibilite</code> table reference
     */
    public Disponibilite(String alias) {
        this(DSL.name(alias), DISPONIBILITE);
    }

    /**
     * Create an aliased <code>MDD.disponibilite</code> table reference
     */
    public Disponibilite(Name alias) {
        this(alias, DISPONIBILITE);
    }

    /**
     * Create a <code>MDD.disponibilite</code> table reference
     */
    public Disponibilite() {
        this(DSL.name("disponibilite"), null);
    }

    public <O extends Record> Disponibilite(Table<O> child, ForeignKey<O, DisponibiliteRecord> key) {
        super(child, key, DISPONIBILITE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mdd.MDD;
    }

    @Override
    public UniqueKey<DisponibiliteRecord> getPrimaryKey() {
        return Keys.DISPONIBILITE_CC0;
    }

    @Override
    public List<ForeignKey<DisponibiliteRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DISPONIBILITE__DISPONIBILITE_CR0, Keys.DISPONIBILITE__DISPONIBILITE_CR1);
    }

    private transient Cours _cours;
    private transient Professeur _professeur;

    /**
     * Get the implicit join path to the <code>MDD.cours</code> table.
     */
    public Cours cours() {
        if (_cours == null)
            _cours = new Cours(this, Keys.DISPONIBILITE__DISPONIBILITE_CR0);

        return _cours;
    }

    /**
     * Get the implicit join path to the <code>MDD.professeur</code> table.
     */
    public Professeur professeur() {
        if (_professeur == null)
            _professeur = new Professeur(this, Keys.DISPONIBILITE__DISPONIBILITE_CR1);

        return _professeur;
    }

    @Override
    public Disponibilite as(String alias) {
        return new Disponibilite(DSL.name(alias), this);
    }

    @Override
    public Disponibilite as(Name alias) {
        return new Disponibilite(alias, this);
    }

    @Override
    public Disponibilite as(Table<?> alias) {
        return new Disponibilite(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Disponibilite rename(String name) {
        return new Disponibilite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Disponibilite rename(Name name) {
        return new Disponibilite(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Disponibilite rename(Table<?> name) {
        return new Disponibilite(name.getQualifiedName(), null);
    }
}
