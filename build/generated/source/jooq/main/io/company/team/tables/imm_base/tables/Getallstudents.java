/*
 * This file is generated by jOOQ.
 */
package io.company.team.tables.imm_base.tables;


import io.company.team.tables.imm_base.ImmBase;
import io.company.team.tables.imm_base.tables.records.GetallstudentsRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Getallstudents extends TableImpl<GetallstudentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>IMM_base.getallstudents</code>
     */
    public static final Getallstudents GETALLSTUDENTS = new Getallstudents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetallstudentsRecord> getRecordType() {
        return GetallstudentsRecord.class;
    }

    /**
     * The column <code>IMM_base.getallstudents.matriculee</code>.
     */
    public final TableField<GetallstudentsRecord, String> MATRICULEE = createField(DSL.name("matriculee"), io.company.team.tables.mdd.Domains.MATRICULEE.getDataType(), this, "");

    /**
     * The column <code>IMM_base.getallstudents.nom</code>.
     */
    public final TableField<GetallstudentsRecord, String> NOM = createField(DSL.name("nom"), io.company.team.tables.mdd.Domains.NOM.getDataType(), this, "");

    /**
     * The column <code>IMM_base.getallstudents.ddn</code>.
     */
    public final TableField<GetallstudentsRecord, LocalDate> DDN = createField(DSL.name("ddn"), SQLDataType.LOCALDATE, this, "");

    private Getallstudents(Name alias, Table<GetallstudentsRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private Getallstudents(Name alias, Table<GetallstudentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>IMM_base.getallstudents</code> table reference
     */
    public Getallstudents(String alias) {
        this(DSL.name(alias), GETALLSTUDENTS);
    }

    /**
     * Create an aliased <code>IMM_base.getallstudents</code> table reference
     */
    public Getallstudents(Name alias) {
        this(alias, GETALLSTUDENTS);
    }

    /**
     * Create a <code>IMM_base.getallstudents</code> table reference
     */
    public Getallstudents() {
        this(DSL.name("getallstudents"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ImmBase.IMM_BASE;
    }

    @Override
    public Getallstudents as(String alias) {
        return new Getallstudents(DSL.name(alias), this, parameters);
    }

    @Override
    public Getallstudents as(Name alias) {
        return new Getallstudents(alias, this, parameters);
    }

    @Override
    public Getallstudents as(Table<?> alias) {
        return new Getallstudents(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getallstudents rename(String name) {
        return new Getallstudents(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getallstudents rename(Name name) {
        return new Getallstudents(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getallstudents rename(Table<?> name) {
        return new Getallstudents(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public Getallstudents call() {
        Getallstudents result = new Getallstudents(DSL.name("getallstudents"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
